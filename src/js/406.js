/**
 * @param {number[][]} people
 * @return {number[][]}
 */
var reconstructQueue = function(people) {
    people.sort((a, b) => {
        if (a[0] == b[0]) {
            return a[1] - b[1];
        } else {
            return b[0] - a[0];
        }
    });

    const res = [];

    for (const person of people) {
        res.splice(person[1], 0, person);
    }

    return res;
};

/**
 * (h, k)
 * [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
 * 先按照高度h降序排列，k升序排列。
 * 因为高度大的需要考虑的少，前面不会有更大的值。
 * [[7,0], [7,1], [6,1], [5,0], [5,2], [4,4]]
 * 然后先插入最高的
 * [[7,0], [7,1]]，同样高度的按k值升序排列。
 * 接着插入次高的，插入到k值所在位置。
 * [[7,0], [6,1], [7,1]]
 * 重复以上步骤，
 * [[5,0], [7,0], [6,1], [7,1]]
 * [[5,0], [7,0], [5,2], [6,1], [7,1]]
 * [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
 */
